#!/bin/bash
# --- Web Server Setup Wizard (Omnitide Nexus - v4.0-NoTunnel FINAL) ---
# Objective: Seamlessly configure a home server (Debian/Ubuntu) for web hosting
# using a free DDNS/Static IP hostname and port forwarding. Deploys a specific
# website ('thosedataguys') and includes default security/admin tools.
# Adheres to: Omnitide Nexus Principles, TPC Standard, IDA.
# Run as root or with sudo: sudo bash webguys.sh

# Strict Error Handling & Self-Check
set -e # Exit immediately if a command exits with a non-zero status.
set -o pipefail # Causes pipelines to fail if any command fails, not just the last one.
# Perform initial syntax check on this script file itself
bash -n "$0" || { echo -e "\e[31m[FATAL]\e[0m Syntax error detected in this script ($0) itself! Please fix or re-download carefully." >&2; exit 1; }

# --- Configuration & Constants ---
readonly DEFAULT_WEB_ROOT_PARENT="/var/www"
readonly DEFAULT_SSH_PORT="22"
readonly SPECIFIC_SITE_NAME="thosedataguys" # Used for prompts/defaults
readonly SUMMARY_FILE="/root/${SPECIFIC_SITE_NAME}_setup_summary.txt"
readonly LOG_FILE="/var/log/${SPECIFIC_SITE_NAME}_setup_wizard.log"
readonly QUERY_LOG_FILE="/var/log/${SPECIFIC_SITE_NAME}_queries.log"

# --- Global State Variables ---
# (Populated by functions)
PHP_INSTALLED=false
COCKPIT_INSTALLED=false
FAIL2BAN_INSTALLED=false
WEB_SERVER_USER=""
WEBSERVER_CHOICE=""
DOMAIN_NAME=""
WEB_ROOT=""
ADMIN_EMAIL=""
SSH_PORT=""
PHP_SOCKET=""
SYSTEMD_SERVICE=""
RELOAD_CMD=""
SITES_AVAILABLE=""
SITES_ENABLED=""
UFW_ALLOW_CMD=""
VHOST_CONF_FILE=""

# --- Helper Functions ---
print_info() { echo -e "\e[32m[INFO]\e[0m $1"; }
print_warn() { echo -e "\e[33m[WARN]\e[0m $1"; }
print_error() { echo -e "\e[31m[ERROR]\e[0m $1" >&2; }
log_action() { echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> "$LOG_FILE"; }

run_command() {
    # Executes a command, logs action/output/status, relies on set -e / pipefail for exit.
    local cmd_string="$*"
    log_action "Running: $cmd_string"; print_info "Running: $cmd_string"
    local output; local status
    # Execute command capturing stderr to stdout, log combined output, check status
    output=$(eval "$cmd_string" 2>&1) || {
        status=$?
        echo "$output" >> "$LOG_FILE"; log_action "FAILED (Status $status): $cmd_string";
        print_error "Cmd failed (status $status): $cmd_string"; print_warn "Check logs: $LOG_FILE";
        # set -e handles exit, but return status just in case needed if set -e is removed
        return $status
    }
    echo "$output" >> "$LOG_FILE"; log_action "SUCCESS: $cmd_string"; return 0
}

prompt_yes_no() {
    # Prompts user for Y/n input with a default value. Returns 0 for yes, 1 for no.
    local prompt_message=$1; local default_char=$2; local response; local prompt_suffix=" [Y/n]"; if [[ "$default_char" == "n" ]]; then prompt_suffix=" [y/N]"; fi
    while true; do read -p "$prompt_message$prompt_suffix: " response; response=${response:-$default_char}; response=$(echo "$response" | tr '[:upper:]' '[:lower:]'); if [[ "$response" == "y" || "$response" == "yes" ]]; then return 0; elif [[ "$response" == "n" || "$response" == "no" ]]; then return 1; else echo "Invalid input."; fi; done
}

validate_hostname() {
    # Basic hostname format validation.
    local hostname=$1; if [[ "$hostname" =~ ^[a-zA-Z0-9.-]+$ && "$hostname" == *"."* && "$hostname" != *" "* && ${#hostname} -le 253 ]]; then return 0; else print_error "Invalid hostname format: $hostname"; return 1; fi
}

# Check existence safely, return 0 if exists, 1 if not or command fails
user_exists() { command -v getent >/dev/null && getent passwd "$1" > /dev/null 2>&1; }
group_exists() { command -v getent >/dev/null && getent group "$1" > /dev/null 2>&1; }

verify_service_active() {
    # Checks if a systemd service is active after a start/restart command.
    local service_name=$1; print_info "Verifying $service_name status..."; sleep 2
    if ! systemctl is-active --quiet "$service_name"; then
        print_error "$service_name service failed to start or is not active."; log_action "VERIFY FAILED: $service_name not active."
        print_warn "Check status: sudo systemctl status $service_name"; print_warn "Check logs: sudo journalctl -u $service_name"; return 1
    fi
    print_info "$service_name service is active."; log_action "VERIFY SUCCESS: $service_name active."; return 0
}

# --- Ensure Root ---
if [ "$(id -u)" -ne 0 ]; then print_error "This script must be run as root or with sudo."; exit 1; fi

# --- Welcome ---
clear; echo "======================================================="; echo " Omnitide Nexus - Home Web Server Setup Wizard (v4.0-NoTunnel)"; echo "      Focus: Free Hostname (DDNS) & Port Forwarding"; echo "======================================================="; echo "Prepares Debian/Ubuntu server."; print_warn "DISCLAIMER: Use at own risk."; echo "" | tee "$LOG_FILE"; log_action "Setup wizard started (v4.0-NoTunnel)."; prompt_yes_no "Proceed?" "y" || { echo "Exiting."; log_action "User aborted at welcome."; exit 0; }; echo ""

# --- Gather Information ---
gather_info() { print_info "Gathering details..."; print_warn "Enter your FREE Dynamic DNS (DDNS) hostname (e.g., ${SPECIFIC_SITE_NAME}.duckdns.org)"; print_warn "OR your purchased domain name if you have one."; while true; do read -p "Enter hostname: " INTENDED_HOSTNAME; validate_hostname "$INTENDED_HOSTNAME" && break; done; DOMAIN_NAME=$INTENDED_HOSTNAME; DEFAULT_WEB_ROOT="$DEFAULT_WEB_ROOT_PARENT/$SPECIFIC_SITE_NAME"; read -p "Web root [$DEFAULT_WEB_ROOT]: " WEB_ROOT; WEB_ROOT=${WEB_ROOT:-$DEFAULT_WEB_ROOT}; while true; do read -p "Admin email (for SSL certs): " ADMIN_EMAIL; if [[ "$ADMIN_EMAIL" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then break; else print_error "Invalid email."; fi; done; echo ""; log_action "Info: Host=$DOMAIN_NAME, Root=$WEB_ROOT, Email=$ADMIN_EMAIL"; }

# --- Initial System Prep ---
prepare_system() { print_info "Preparing system (updates & essentials)..."; log_action "System update/deps check."; export DEBIAN_FRONTEND=noninteractive; run_command apt update; run_command apt -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" upgrade -y; print_info "Installing essential tools..."; run_command apt install -y curl wget ca-certificates gnupg lsb-release apt-transport-https coreutils; export DEBIAN_FRONTEND=dialog; echo ""; }

# --- Web Server ---
setup_webserver() { print_info "Select web server..."; echo " 1) Nginx"; echo " 2) Apache2"; echo " 3) Caddy"; while true; do read -p "Choose [1]: " ws_choice_num; ws_choice_num=${ws_choice_num:-1}; case $ws_choice_num in 1) WEBSERVER_CHOICE="nginx"; break ;; 2) WEBSERVER_CHOICE="apache2"; break ;; 3) WEBSERVER_CHOICE="caddy"; break ;; *) print_error "Invalid choice." ;; esac; done; log_action "Web server: $WEBSERVER_CHOICE"; print_info "Setting up $WEBSERVER_CHOICE..."; case $WEBSERVER_CHOICE in nginx) run_command apt install -y nginx; SYSTEMD_SERVICE="nginx"; RELOAD_CMD="systemctl reload nginx"; SITES_AVAILABLE="/etc/nginx/sites-available"; SITES_ENABLED="/etc/nginx/sites-enabled"; UFW_ALLOW_CMD="'Nginx Full'"; VHOST_CONF_FILE="$SITES_AVAILABLE/$DOMAIN_NAME"; WEB_SERVER_USER="www-data" ;; apache2) run_command apt install -y apache2; SYSTEMD_SERVICE="apache2"; RELOAD_CMD="systemctl reload apache2"; SITES_AVAILABLE="/etc/apache2/sites-available"; SITES_ENABLED="/etc/apache2/sites-enabled"; UFW_ALLOW_CMD="'Apache Full'"; VHOST_CONF_FILE="$SITES_AVAILABLE/$DOMAIN_NAME.conf"; run_command a2enmod ssl rewrite headers proxy proxy_http proxy_fcgi setenvif socache_shmcb; WEB_SERVER_USER="www-data" ;; caddy) print_info "Deps..."; run_command apt install -y debian-keyring debian-archive-keyring apt-transport-https curl gpg; print_info "GPG key..."; run_command curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' -o /tmp/caddy_gpg.key; print_info "Adding GPG key..."; run_command rm -f /usr/share/keyrings/caddy-stable-archive-keyring.gpg; log_action "Running GPG..."; if gpg --batch --yes --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg < /tmp/caddy_gpg.key >> "$LOG_FILE" 2>&1; then log_action "SUCCESS: Caddy GPG."; else log_action "FAILED: Caddy GPG."; print_error "GPG failed."; exit 1; fi; run_command rm /tmp/caddy_gpg.key; print_info "APT source..."; DISTRO=$(lsb_release -cs); SOURCES_LIST_CONTENT="deb [signed-by=/usr/share/keyrings/caddy-stable-archive-keyring.gpg] https://dl.cloudsmith.io/public/caddy/stable/deb/ubuntu $DISTRO main"; log_action "Adding source list..."; echo "$SOURCES_LIST_CONTENT" | sudo tee /etc/apt/sources.list.d/caddy-stable.list > /dev/null; if [ ! -s /etc/apt/sources.list.d/caddy-stable.list ]; then print_error "Failed source list."; exit 1; fi; log_action "SUCCESS: Added Caddy source."; print_info "Updating list..."; run_command apt update; print_info "Installing Caddy..."; run_command apt install -y caddy; SYSTEMD_SERVICE="caddy"; RELOAD_CMD="systemctl reload caddy"; UFW_ALLOW_CMD="caddy"; WEB_SERVER_USER="caddy" ;; esac; run_command systemctl enable $SYSTEMD_SERVICE; run_command systemctl start $SYSTEMD_SERVICE; verify_service_active $SYSTEMD_SERVICE; print_info "Creating web root: $WEB_ROOT"; run_command mkdir -p "$WEB_ROOT"; if ! group_exists "$WEB_SERVER_USER"; then print_error "Group '$WEB_SERVER_USER' not found. Install likely failed."; exit 1; fi; run_command chown -R $WEB_SERVER_USER:$WEB_SERVER_USER "$WEB_ROOT"; run_command chmod -R 755 "$WEB_ROOT"; if [ "$WEBSERVER_CHOICE" == "nginx" ] && [ -L "$SITES_ENABLED/default" ]; then run_command rm -f "$SITES_ENABLED/default"; fi; if [ "$WEBSERVER_CHOICE" == "apache2" ] && [ -L "$SITES_ENABLED/000-default.conf" ]; then run_command a2dissite 000-default.conf; fi; if [ "$WEBSERVER_CHOICE" == "caddy" ]; then [ ! -f /etc/caddy/Caddyfile ] && echo "" | run_command tee /etc/caddy/Caddyfile > /dev/null; run_command cp /etc/caddy/Caddyfile /etc/caddy/Caddyfile.bak; fi; echo ""; }

# --- Optional Components ---
setup_optional_components() { if prompt_yes_no "Install PHP-FPM (for logger)?" "y"; then print_info "Installing PHP..."; log_action "Installing PHP."; run_command apt install -y php-fpm php-mysql php-gd php-curl php-mbstring php-xml php-zip php-intl php-imagick; PHP_INSTALLED=true; PHP_VERSION=$(php -r 'echo PHP_MAJOR_VERSION.".".PHP_MINOR_VERSION;'); PHP_SOCKET="/run/php/php${PHP_VERSION}-fpm.sock"; if [ ! -e "$PHP_SOCKET" ]; then PHP_SOCKET=$(find /run/php/ -name 'php*-fpm.sock' -print -quit); if [ -z "$PHP_SOCKET" ]; then print_warn "Could not reliably detect PHP-FPM socket path."; PHP_INSTALLED=false; else print_info "PHP Socket: $PHP_SOCKET"; fi; else print_info "PHP Socket: $PHP_SOCKET"; fi; echo ""; else PHP_INSTALLED=false; print_warn "Query logger requires PHP."; echo ""; fi; if prompt_yes_no "Install MariaDB?" "n"; then print_info "Installing MariaDB..."; log_action "Installing MariaDB."; run_command apt install -y mariadb-server; print_info "Run 'sudo mysql_secure_installation' MANUALLY later."; echo ""; fi; if prompt_yes_no "Install Fail2Ban (SSH protection)?" "y"; then print_info "Installing Fail2Ban..."; log_action "Installing Fail2Ban."; run_command apt install -y fail2ban; FAIL2BAN_INSTALLED=true; run_command mkdir -p /etc/fail2ban/jail.d; cat << EOF | run_command tee /etc/fail2ban/jail.d/sshd.local > /dev/null; [sshd]\nenabled = true\nmaxretry = 3\nbantime = 1h\n#ignoreip = 127.0.0.1/8 ::1 192.168.0.0/16 YOUR_OTHER_IP\nEOF; run_command systemctl enable fail2ban; run_command systemctl restart fail2ban; verify_service_active fail2ban || print_warn "Fail2Ban service may not be active."; print_info "Fail2Ban installed."; echo ""; else FAIL2BAN_INSTALLED=false; fi; if prompt_yes_no "Install Cockpit UI (:9090)?" "y"; then print_info "Installing Cockpit..."; log_action "Installing Cockpit."; run_command apt install -y cockpit; run_command systemctl enable --now cockpit.socket; verify_service_active cockpit.socket || print_warn "Cockpit socket may not be active."; COCKPIT_INSTALLED=true; print_info "Cockpit installed."; echo ""; else COCKPIT_INSTALLED=false; fi; }

# --- Firewall ---
setup_firewall() {
    print_info "Configuring Firewall (UFW)..."; log_action "Configuring UFW."; if ! command -v ufw > /dev/null; then run_command apt install -y ufw; fi
    read -p "Enter SSH port to allow [$DEFAULT_SSH_PORT]: " SSH_PORT_INPUT; SSH_PORT=${SSH_PORT_INPUT:-$DEFAULT_SSH_PORT} # Assign to global SSH_PORT
    run_command ufw --force enable # Ensure UFW is enabled before adding rules
    run_command ufw default deny incoming; run_command ufw default allow outgoing
    run_command ufw limit $SSH_PORT/tcp comment 'Rate Limit SSH' # Apply LIMIT directly
    print_info "Opening web ports (80/443) on firewall."; log_action "FW: Opening 80/443."
    if [[ "$WEBSERVER_CHOICE" == "caddy" ]]; then if ufw app info caddy > /dev/null 2>&1; then run_command ufw allow 'Caddy'; else run_command ufw allow http; run_command ufw allow https; fi; else run_command ufw allow $UFW_ALLOW_CMD; fi
    if [[ "$COCKPIT_INSTALLED" = true ]]; then if prompt_yes_no "Allow Cockpit (port 9090) through firewall?" "y"; then run_command ufw allow 9090/tcp comment 'Cockpit Web UI'; log_action "FW: Allowed Cockpit."; else print_warn "Cockpit installed but port 9090 closed."; log_action "FW: Cockpit port closed."; fi; fi
    print_info "Firewall status:"; run_command ufw status verbose; echo ""
}

# --- Deploy Specific Website ---
deploy_thosedataguys_site() { if prompt_yes_no "Deploy '$SPECIFIC_SITE_NAME' website?" "y"; then print_info "Deploying '$SPECIFIC_SITE_NAME' files..."; log_action "Deploying $SPECIFIC_SITE_NAME site."; if [[ "$PHP_INSTALLED" = false ]]; then print_warn "PHP needed for logger."; if prompt_yes_no "Install PHP-FPM now?" "y"; then run_command apt install -y php-fpm php-mysql php-gd php-curl php-mbstring php-xml php-zip php-intl php-imagick; PHP_INSTALLED=true; PHP_VERSION=$(php -r 'echo PHP_MAJOR_VERSION.".".PHP_MINOR_VERSION;'); PHP_SOCKET="/run/php/php${PHP_VERSION}-fpm.sock"; if [ ! -e "$PHP_SOCKET" ]; then PHP_SOCKET=$(find /run/php/ -name 'php*-fpm.sock' -print -quit); fi; if [ -z "$PHP_SOCKET" ]; then print_error "PHP installed but socket detection failed. Cannot configure logger."; PHP_INSTALLED=false; else print_info "PHP Socket: $PHP_SOCKET"; fi; else print_error "Cannot deploy logger without PHP."; fi; fi; local js_vars="var cockpitInstalled=${COCKPIT_INSTALLED:-false};"; cat << EOF > "$WEB_ROOT/index.html"; <!DOCTYPE html><html lang=en><head><meta charset=UTF-8><meta name=viewport content="width=device-width,initial-scale=1"><title>$SPECIFIC_SITE_NAME</title><style>:root{--neon-green:#39ff14;--background-black:#000;--dark-grey:#111}body{background-color:var(--background-black);color:var(--neon-green);font-family:'Courier New',Courier,monospace;margin:0;padding:20px;display:flex;flex-direction:column;align-items:center;min-height:100vh}pre#logo{font-size:9px;line-height:1.1;text-align:center;margin-bottom:30px;color:var(--neon-green);white-space:pre;text-shadow:0 0 3px var(--neon-green),0 0 6px var(--neon-green)}.container{width:80%;max-width:700px;border:1px solid var(--neon-green);padding:20px;box-shadow:0 0 10px var(--neon-green);background-color:rgba(17,17,17,.5);border-radius:5px}label{display:block;margin-bottom:10px;text-shadow:0 0 2px var(--neon-green)}input[type=text],textarea#outputArea{background-color:var(--dark-grey);color:var(--neon-green);border:1px solid var(--neon-green);padding:10px;width:calc(100% - 22px);font-family:inherit;margin-bottom:15px;box-shadow:inset 0 0 5px rgba(57,255,20,.5)}button{background-color:var(--neon-green);color:var(--background-black);border:1px solid var(--neon-green);padding:10px 20px;cursor:pointer;font-family:inherit;font-weight:700;display:block;margin:0 auto 20px;box-shadow:0 0 8px var(--neon-green);transition:background-color .2s ease,color .2s ease,box-shadow .2s ease}button:hover{background-color:var(--background-black);color:var(--neon-green);box-shadow:0 0 15px var(--neon-green),0 0 20px var(--neon-green)}textarea#outputArea{height:150px;resize:vertical}.hidden-link{position:fixed;bottom:5px;right:5px;width:15px;height:15px;background-color:var(--neon-green);opacity:.08;cursor:pointer;z-index:1000;border-radius:50%;box-shadow:0 0 5px var(--neon-green);transition:opacity .3s ease}.hidden-link:hover{opacity:.9}</style></head><body><pre id=logo> ________ ________  ___  _____  ________ ________      _____   ___ ______ ________ ________ ________ \______ \\\\______ \\ \\_ \\ \\__ // \\______ \\\\______ \\    / __ /_ / _//_ __ //\\______ \\\\______ \\\\______ \\  | __   | | ____ | | | | / _ \\  | __   | | _ __ |   / /_/ > \\__ \\ | _ \\  | __   | | __   | | _ __ |  | \\ __ \\ | \\ __\\| | | |/ /_\\ \\ | \\ __ \\ | \\ | \\   / _  <  / __ \\| \\ | \\ | \\ __ \\ | \\ __ \\ | \\ | \\  |____ /  |____ /\\|_|\\_|\\_____/ |____ /  |______/  /____ /\\\\____/|______/ |____ / |____ / |______/   ____        _        ____ ____  / __ \\      / \\      /_ //_ // | /  \\ \\    / _ \\      / /  / / | \\___\\ \\  / /_\\ \\    / /  / /  \\______/ /____ /\\\\__/ /__/ /</pre><div class=container><form id=queryForm><label for=queryInput>Enter Query:</label><input type=text id=queryInput name=query required autocomplete=off><button type=submit>Submit Queries Here</button></form><label for=outputArea>Output Log:</label><textarea id=outputArea readonly></textarea></div><a id=hiddenAdminLink class=hidden-link title="Admin Access"></a><script>const form=document.getElementById("queryForm"),queryInput=document.getElementById("queryInput"),outputArea=document.getElementById("outputArea"),hiddenAdminLink=document.getElementById("hiddenAdminLink");form.addEventListener("submit",async e=>{e.preventDefault();const t=queryInput.value.trim();if(t){const e=new FormData;e.append("query",t),outputArea.value+=\`\\n[ME] \${t}\\n\`,queryInput.value="";try{const t=await fetch("logger.php",{method:"POST",body:e});if(!t.ok)throw new Error(\`HTTP error! Status: \${t.status}\`);const o=await t.text();outputArea.value+=\`[SERVER] \${o}\\n\`}catch(t){console.error("Error query:",t),outputArea.value+=\`[SYSTEM] Error: \${t.message}\\n\`}finally{outputArea.scrollTop=outputArea.scrollHeight}}});if("undefined"!=typeof cockpitInstalled&&cockpitInstalled){const e=window.location.hostname;hiddenAdminLink.href=\`//\${e}:9090\`,hiddenAdminLink.target="_blank"}else hiddenAdminLink.title="Cockpit not installed",hiddenAdminLink.style.cursor="not-allowed",hiddenAdminLink.style.opacity="0.05"</script><script>${js_vars}</script></body></html>\nEOF; run_command chown $WEB_SERVER_USER:$WEB_SERVER_USER "$WEB_ROOT/index.html"; run_command chmod 644 "$WEB_ROOT/index.html"; print_info "Deployed index.html."; if [[ "$PHP_INSTALLED" = true ]]; then cat << EOF > "$WEB_ROOT/logger.php"; <?php \\\$logFilePath = '$QUERY_LOG_FILE'; header('Content-Type: text/plain'); if (\\\$_SERVER['REQUEST_METHOD'] === 'POST') { if (isset(\\\$_POST['query']) && !empty(trim(\\\$_POST['query']))) { \\\$query = trim(\\\$_POST['query']); \\\$timestamp = date('Y-m-d H:i:s T'); \\\$clientIp = \\\$_SERVER['REMOTE_ADDR'] ?? 'UNKNOWN_IP'; \\\$sanitizedQuery = filter_var(\\\$query, FILTER_SANITIZE_STRING, FILTER_FLAG_STRIP_LOW | FILTER_FLAG_STRIP_HIGH); if (\\\$sanitizedQuery === false || strlen(\\\$sanitizedQuery) > 1024 ) { \\\$sanitizedQuery = "[Invalid/Long Query] " . substr(\\\$query, 0, 200); } \\\$logEntry = "[\\\$timestamp] [\\\$clientIp] Query: \\\$sanitizedQuery" . PHP_EOL; if (!file_exists(\\\$logFilePath)) { touch(\\\$logFilePath); chmod(\\\$logFilePath, 0664); chown(\\\$logFilePath, '$WEB_SERVER_USER'); } if (is_writable(\\\$logFilePath)) { if (file_put_contents(\\\$logFilePath, \\\$logEntry, FILE_APPEND | LOCK_EX) !== false) { echo "Query logged."; } else { error_log("Failed log: \\\$logFilePath"); http_response_code(500); echo "Error: Server logging failed."; } } else { error_log("Log not writable: \\\$logFilePath"); http_response_code(500); echo "Error: Log destination not writable."; } } else { http_response_code(400); echo "Error: No query."; } } else { http_response_code(405); echo "Error: Invalid method."; } ?>\nEOF; run_command touch "$QUERY_LOG_FILE"; if ! group_exists "adm"; then print_warn "Group 'adm' not found, using primary group '$WEB_SERVER_USER' for log file."; LOG_GROUP=$WEB_SERVER_USER; else LOG_GROUP="adm"; fi; run_command chown $WEB_SERVER_USER:$LOG_GROUP "$QUERY_LOG_FILE"; run_command chmod 664 "$QUERY_LOG_FILE"; run_command chown $WEB_SERVER_USER:$WEB_SERVER_USER "$WEB_ROOT/logger.php"; run_command chmod 644 "$WEB_ROOT/logger.php"; print_info "Deployed logger.php -> $QUERY_LOG_FILE"; else print_warn "PHP not installed, logger.php NOT deployed."; fi; configure_final_webserver_site; echo ""; else print_info "Skipping deployment of specific site."; configure_final_webserver_site; fi; }

# --- Configure Final Webserver Site ---
configure_final_webserver_site() { print_info "Writing final web server configuration for $DOMAIN_NAME..."; log_action "Writing final webserver config."; PHP_HANDLER_CONFIG=""; if [[ "$PHP_INSTALLED" = true && -n "$PHP_SOCKET" ]]; then if [ "$WEBSERVER_CHOICE" == "nginx" ]; then PHP_HANDLER_CONFIG=$(cat << EOT\n    location ~ \.php$ { include snippets/fastcgi-php.conf; fastcgi_pass unix:$PHP_SOCKET; fastcgi_split_path_info ^(.+?\.php)(/.*)$; try_files \$fastcgi_script_name =404; }\nEOT); elif [ "$WEBSERVER_CHOICE" == "apache2" ]; then PHP_HANDLER_CONFIG=$(cat << EOT\n    <FilesMatch \.php$> SetHandler "proxy:unix:$PHP_SOCKET|fcgi://localhost" </FilesMatch>\nEOT); fi; fi; SEC_HEADERS_NGINX=$(cat << 'EOT'\n    add_header X-Frame-Options "SAMEORIGIN" always; add_header X-Content-Type-Options "nosniff" always; add_header Referrer-Policy "no-referrer-when-downgrade" always; # add_header Content-Security-Policy "default-src 'self'; script-src 'self'; object-src 'none';" always; # add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;\nEOT); SEC_HEADERS_APACHE=$(cat << 'EOT'\n    Header always set X-Frame-Options "SAMEORIGIN"; Header always set X-Content-Type-Options "nosniff"; Header always set Referrer-Policy "no-referrer-when-downgrade"; # Header always set Content-Security-Policy "default-src 'self'; script-src 'self'; object-src 'none';" # Header always set Strict-Transport-Security "max-age=63072000; includeSubDomains; preload"\nEOT); SEC_HEADERS_CADDY=$(cat << 'EOT'\n        header { X-Frame-Options "SAMEORIGIN"; X-Content-Type-Options "nosniff"; Referrer-Policy "no-referrer-when-downgrade"; # Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" }\nEOT); if [ "$WEBSERVER_CHOICE" == "nginx" ]; then VHOST_CONF_FILE="${SITES_AVAILABLE}/${DOMAIN_NAME}"; cat << EOF > "$VHOST_CONF_FILE"; server { listen 80 default_server; listen [::]:80 default_server; server_name $DOMAIN_NAME www.$DOMAIN_NAME _; root $WEB_ROOT; index index.html index.htm index.php; location / { try_files \$uri \$uri/ /index.php?\$query_string; } $SEC_HEADERS_NGINX $PHP_HANDLER_CONFIG location ~ /\.ht { deny all; } location = /favicon.ico { log_not_found off; access_log off; } location = /robots.txt { log_not_found off; access_log off; allow all; } location ~* \.(css|gif|ico|jpeg|jpg|js|png)$ { expires max; log_not_found off; } access_log /var/log/nginx/$DOMAIN_NAME.access.log; error_log /var/log/nginx/$DOMAIN_NAME.error.log; }\nEOF; [ -L "$SITES_ENABLED/default" ] && run_command rm -f "$SITES_ENABLED/default"; run_command ln -sf "$VHOST_CONF_FILE" "$SITES_ENABLED/"; elif [ "$WEBSERVER_CHOICE" == "apache2" ]; then VHOST_CONF_FILE="${SITES_AVAILABLE}/${DOMAIN_NAME}.conf"; cat << EOF > "$VHOST_CONF_FILE"; <VirtualHost *:80> ServerAdmin $ADMIN_EMAIL; ServerName $DOMAIN_NAME; ServerAlias www.$DOMAIN_NAME; DocumentRoot $WEB_ROOT; ErrorLog \${APACHE_LOG_DIR}/$DOMAIN_NAME.error.log; CustomLog \${APACHE_LOG_DIR}/$DOMAIN_NAME.access.log combined; <Directory $WEB_ROOT> Options -Indexes +FollowSymLinks; AllowOverride All; Require all granted; </Directory> $PHP_HANDLER_CONFIG $SEC_HEADERS_APACHE <Files ".ht*"> Require all denied </Files> </VirtualHost>\nEOF; [ -L "$SITES_ENABLED/000-default.conf" ] && run_command a2dissite 000-default.conf; run_command a2ensite "$DOMAIN_NAME.conf"; elif [ "$WEBSERVER_CHOICE" == "caddy" ]; then CADDY_DOMAIN_BLOCK="$DOMAIN_NAME www.$DOMAIN_NAME"; CADDY_LISTEN_PREFIX=""; cat << EOF | run_command sudo tee /etc/caddy/Caddyfile > /dev/null; { email $ADMIN_EMAIL }\n$CADDY_LISTEN_PREFIX$CADDY_DOMAIN_BLOCK { root * $WEB_ROOT; file_server; encode gzip zstd; $( [[ "$PHP_INSTALLED" = true && -n "$PHP_SOCKET" ]] && echo "php_fastcgi unix:$PHP_SOCKET" ); $SEC_HEADERS_CADDY log { output file /var/log/caddy/$DOMAIN_NAME.access.log { roll_size 10mb; roll_keep 5; } format console } }\nEOF; run_command mkdir -p /var/log/caddy; run_command chown caddy:adm /var/log/caddy; run_command chmod 775 /var/log/caddy; fi; print_info "Testing final $WEBSERVER_CHOICE configuration..."; if [[ "$WEBSERVER_CHOICE" == "nginx" ]]; then run_command nginx -t && run_command systemctl reload nginx; fi; if [[ "$WEBSERVER_CHOICE" == "apache2" ]]; then run_command apache2ctl configtest && run_command systemctl reload apache2; fi; if [[ "$WEBSERVER_CHOICE" == "caddy" ]]; then run_command caddy fmt --overwrite /etc/caddy/Caddyfile && run_command systemctl reload caddy; fi; }

# --- SSL Setup ---
setup_ssl() { if [[ "$WEBSERVER_CHOICE" == "caddy" ]]; then print_info "Caddy handles HTTPS."; print_warn "Ensure DNS points to PUBLIC IP for Caddy ACME."; log_action "Skip Certbot (Caddy)."; return 0; fi; print_info "Setting up SSL (Certbot) for $DOMAIN_NAME..."; log_action "Start Certbot SSL."; CERTBOT_PLUGIN_PKG=""; if [[ "$WEBSERVER_CHOICE" == "nginx" ]]; then CERTBOT_PLUGIN_PKG="python3-certbot-nginx"; fi; if [[ "$WEBSERVER_CHOICE" == "apache2" ]]; then CERTBOT_PLUGIN_PKG="python3-certbot-apache2"; fi; if ! command -v certbot > /dev/null; then run_command apt install -y certbot $CERTBOT_PLUGIN_PKG; fi; print_warn "Ensure DNS points to PUBLIC IP & port 80 open!"; read -p "Press Enter when ready for Certbot..."; log_action "Run Certbot for $DOMAIN_NAME."; if run_command certbot --$WEBSERVER_CHOICE --non-interactive --agree-tos --email $ADMIN_EMAIL -d $DOMAIN_NAME -d www.$DOMAIN_NAME --redirect --hsts --uir; then print_info "Certbot OK."; log_action "Certbot OK."; run_command systemctl status certbot.timer; else print_error "Certbot failed. Check logs."; log_action "Certbot FAIL."; fi; echo ""; }

# --- DDNS Guidance ---
provide_ddns_guidance() { if prompt_yes_no "Need DDNS guidance for '$DOMAIN_NAME'?" "y"; then print_info "DDNS Guidance:"; log_action "DDNS guidance $DOMAIN_NAME."; echo " * Ensure '$DOMAIN_NAME' points to current Public IP."; echo " * Option 1: Check Router DDNS."; echo " * Option 2: Use DDNS Client (DuckDNS script, ddclient)."; echo ""; fi; }

# --- Final Summary & Instructions ---
final_summary() { print_info "Generating Final Summary..."; log_action "Generating summary."; ACCESS_URL="https://$DOMAIN_NAME"; DNS_INSTRUCTIONS="- DNS: Point '$DOMAIN_NAME' (and www) A/AAAA/CNAME record at DNS provider -> Your Public IP / DDNS hostname."; NETWORK_INSTRUCTIONS="- Router Port Forwarding: Forward public 80 & 443 -> $(hostname -I | awk '{print $1}'):80 & 443."; COCKPIT_ACCESS_INFO=""; if [[ "$COCKPIT_INSTALLED" = true ]]; then local cockpit_url_host="$(hostname -I | awk '{print $1}') (or $DOMAIN_NAME)"; COCKPIT_ACCESS_INFO="- Cockpit: https://$cockpit_url_host:9090 (FW port 9090?)"; fi; cat << EOF > "$SUMMARY_FILE"; # --- '$SPECIFIC_SITE_NAME' Setup Summary ---\nTimestamp: $(date)\nHost: $(hostname); Local IP: $(hostname -I | awk '{print $1}')\n# Config\nHostname Used: $DOMAIN_NAME; Web Root: $WEB_ROOT; Web Server: $WEBSERVER_CHOICE; PHP: $PHP_INSTALLED; DB: $(command -v mariadb >/dev/null && echo Yes || echo No); Site Deployed: $(grep -q "$SPECIFIC_SITE_NAME" "$WEB_ROOT/index.html" && echo Yes || echo No)\n# Access\nURL: $ACCESS_URL; $COCKPIT_ACCESS_INFO\n# Security\nFW Enabled: Yes (Status: $(sudo ufw status | head -n 1)); Fail2Ban: $( [[ "$FAIL2BAN_INSTALLED" = true ]] && systemctl is-active --quiet fail2ban && echo Yes || echo No); SSH Port: $SSH_PORT (Rate Limit); HTTPS: $( [[ "$WEBSERVER_CHOICE" == "caddy" ]] && echo "Caddy Auto-HTTPS" || echo "Certbot (Let's Encrypt)" )\n# Logs\nSetup: $LOG_FILE; Web Access: /var/log/$WEBSERVER_CHOICE/$DOMAIN_NAME.access.log; Web Err: /var/log/$WEBSERVER_CHOICE/$DOMAIN_NAME.error.log; Query: $QUERY_LOG_FILE; Certbot: /var/log/letsencrypt/\n# --- !!! MANUAL STEPS !!! ---\n$NETWORK_INSTRUCTIONS\n$DNS_INSTRUCTIONS\n- DDNS Client: Ensure active if Public IP changes.\n- Verify Files: Check $WEB_ROOT.\n- Test Everything: Access $ACCESS_URL, query log, Cockpit.\n# Maintenance\n- Backups: $WEB_ROOT, DB, $QUERY_LOG_FILE\n- Updates: sudo apt update && sudo apt upgrade -y\n- Monitor Logs; Check ISP ToS\n# Troubleshooting\n- Site Down? 1.DNS (dnschecker.org)? 2.Services active? 3.FW ('ufw status')? 4.Port Forwarding (canyouseeme.org)? 5.Web server Logs?\nEOF; run_command chmod 600 "$SUMMARY_FILE"; echo "======================================================="; echo " Setup Complete! Review Summary & Manual Steps"; echo "======================================================="; print_warn ">>> CRITICAL MANUAL STEPS REQUIRED <<<"; echo "$NETWORK_INSTRUCTIONS"; echo "$DNS_INSTRUCTIONS"; echo "- Configure DDNS Client (if your Public IP changes)."; echo "- Verify files in $WEB_ROOT."; echo ""; print_info "Summary: $SUMMARY_FILE"; print_info "Logs: $LOG_FILE"; echo ""; echo "Test via $ACCESS_URL (allow time for DNS propagation). Good luck!"; log_action "Setup wizard finished."; }


# --- Main Execution Flow ---
gather_info
prepare_system
setup_webserver
setup_optional_components # DB, PHP, Fail2Ban, Cockpit
# Removed setup_cloudflare_tunnel call
setup_firewall # Simplified for no tunnel
deploy_thosedataguys_site # Deploy site files before potential SSL config changes
setup_ssl # Simplified for no tunnel
provide_ddns_guidance # Always relevant now
final_summary # Simplified for no tunnel

exit 0
